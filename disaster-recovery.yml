name: 'Disaster recovery'

trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: initiate_db_failover
    displayName: 'Initiate DB failover'
    type: boolean
    default: false
    values:
      - true
      - false
  - name: azure_location_dr
    displayName: 'Azure Location DR'
    type: string
    default: notheurope
    values:
    - westeurope
    - notheurope
    - eastus2
    - centralus
  - name: mssql_password
    displayName: 'Database Admin password'
    type: string


variables:
  tfbackendrg: 'terraform-shared'
  tfbackendsa: 'mkoutfsharedsa'
  tfbackendcontainer: 'tfstates'
  tfbackendkey: 'skedda-chellenge.terraform.dr.tfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'AzureRMConnection'
            backendAzureRmResourceGroupName: '$(tfbackendrg)'
            backendAzureRmStorageAccountName: '$(tfbackendsa)'
            backendAzureRmContainerName: '$(tfbackendcontainer)'
            backendAzureRmKey: '$(tfbackendkey)'
            workingDirectory: 'infrastructure/dr/'
            
        - task: TerraformTaskV4@4
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: 'infrastructure/dr/'
            environmentServiceNameAzureRM: 'AzureRMConnection'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init 
            env:
              ARM_ACCESS_KEY: $(STORAGEACCOUNTKEY)
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'AzureRMConnection'
              backendAzureRmResourceGroupName: '$(tfbackendrg)'
              backendAzureRmStorageAccountName: '$(tfbackendsa)'
              backendAzureRmContainerName: '$(tfbackendcontainer)'
              backendAzureRmKey: '$(tfbackendkey)'
              workingDirectory: 'infrastructure/dr/'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var location=${{ parameters.azure_location_dr }} -var azure_mssql_password=${{ parameters.mssql_password}} -var prefix=skedda-challenge-dr'
              environmentServiceNameAzureRM: 'AzureRMConnection'
              workingDirectory: 'infrastructure/dr'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-var location=${{ parameters.azure_location_dr }} -var azure_mssql_password=${{ parameters.mssql_password}} -var prefix=skedda-challenge-dr'
              environmentServiceNameAzureRM: 'AzureRMConnection'
              workingDirectory: 'infrastructure/dr/'
          
  # initiate failover for db
  - ${{ if eq(parameters.initiate_db_failover, true) }}:
    - stage: databaseFailover
      condition: succeeded('tfvalidate')
      jobs:
        - job: failoverDB
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $database = Get-AzSqlDatabase -DatabaseName skedda-challenge-mssql-db -ResourceGroupName skedda-challenge-dr-rg -ServerName skedda-challenge-mssql-server-secondary
                $database | Set-AzSqlDatabaseSecondary -PartnerResourceGroupName skedda-challenge-dr-rg -Failover

   # call deploy webapp
  # - stage: deployWebApp
  #   condition: succeeded('tfvalidate')
  #   dependsOn: tfdeploy
  #   jobs:
  #   - template: deploy-webapp.yml
  #     parameters:
  #       AppServiceName: 'skedda-challenge-dr-app-service'             